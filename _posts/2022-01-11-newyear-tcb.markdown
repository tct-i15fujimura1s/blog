---
layout: post
title:  "新春TCB2022"
date:   2022-01-11 08:53:00 +0900
categories: jekyll update
tags:
- TechFUL
- TCB
---

概ね楽しかったです。

## 1/1 年越し直後

年越しをした後、TCBがあったことを思い出したので最初の4問を解きました。

### 「2022 sequence」

「2022」の個数を数える問題です。<tex>|S|-3</tex>回ループして数えました。

所要時間は50秒でした。

### 「Quote」

ダブルクォートとシングルクォートの個数をそれぞれ数え、ダブルクォートの個数は2倍して足しました。

所要時間は43秒でした。

### 「あけおめ」

簡単な動的計画法です。ABC211Cの判定版とも言えそうです。1通り以上「akom」が取れるならYesです。

所要時間は1分42秒でした。

### 「2022のような数」

harshad数の判定は高速にできるはずなので、iをLからRまで回してそれぞれ数えました。
仮に<tex>N</tex>から<tex>N+4</tex>までではなく、<tex>N+M</tex>までがすべてharshad数であるという条件でも、先にharshad数判定をして累積和を使うことでできそうです。

所要時間は3分28秒でした。

## 1/1 昼

異常に早起きしてしまって体調が悪かったので、午前中はTCBをするのを控えていました。
体調がよくなってきた昼からTCBを再開しました。

### 「何時になったら出られる？」

それぞれの人について順番に、前の人が降りてからどれだけの時間がかかるかを考えました。
前の人が降りた地点を<tex>x</tex>、今の人が降りる地点を<tex>y</tex>とすると、<tex>x\le y</tex>なら<tex>y-x</tex>だけかかり、<tex>y \lt x</tex>なら次の周回まで（<tex>N - x + y</tex>）かかります。まとめると<tex>(y - x)\% M</tex>になります。
隣り合う人の差ということになるので、計算を楽にするために、便宜的に、最初に地点1で降りる人がいたということにしました。

所要時間は2分31秒でした。

### 「多みくじ」

ここから難しくなってきたように感じます。特に、場合の数は苦手で…。

赤い玉がA個、青い玉がB個あるうちからK個の玉を取り出したとき、赤い玉の個数の期待値を求める問題です。
<tex>0 \le i \le \min(A, K)</tex>のそれぞれについて、（<tex>i\times</tex>赤い玉が<tex>i</tex>個含まれる確率）の総和を求めると期待値が計算できます。赤い玉が<tex>i</tex>個含まれる確率は、<tex>A</tex>個から<tex>i</tex>個選び、<tex>B</tex>個から<tex>K-i</tex>個選んだ場合の数を<tex>A+B</tex>個から<tex>K</tex>個選んだ場合の数で割れば出ます。

```math
\sum_{i=0}^{\min(A,K)} i \times \frac{ {_A}C{_i}\times{_B}C{_{K-i}}}{ {_{A+B}C{_K}}}
```

所要時間は34分53秒でした。

### 「Make Unique」

多重集合から要素を<tex>K</tex>個取り除いて、重複を除去したとき、結果が何通りあるかという問題です。
また場合の数か…と思ったものの、制約を見ればビット全探索が可能だったのでほっとしました。

それぞれの値について、削除するか残すかのパターンを考えます。

- <tex>i</tex>を削除したい場合は、<tex>A_i</tex>個の要素を必ず消す必要があります。
- 逆に、<tex>i</tex>を残したい場合は、消してもいいのは<tex>A_i-1</tex>個までです。

必ず消す要素の個数が<tex>K</tex>以下であり、かつ、必ず消す要素と消してもいい要素の個数の合計が<tex>K</tex>以上であるなら、そのパターンを達成できます。

所要時間は7分19秒でした。

### 「Mex Sum」

この問題は解けませんでした。

前問が得意系の問題だったので、調子に乗って次の問題を開きました。

1以上M以下の整数からなる単調非減少な長さNの数列すべてに対するmexの合計を求めよという問題でした。しかし、どうすればいいのか…。

まず考えたのが、差分を取ることです。例えば、数列が<tex>[1, 2, 3]</tex>なら、差分は<tex>[1,1,1]</tex>になります。差分を取ると、差分の総和はM以下ということになります。

その後いろいろ試行錯誤をしましたが、残念ながら答えは出てきませんでした。途中でスターリング数とか二項係数などが出てきましたが、高速に計算する方法もわからず。後で見るとどうやらスターリング数は使わないようでした。すこし悔しいので、後で解き直してみたいです。

# 1/5

ずっと「Mex Sum」について考えていましたが、いっこうに進まないので半ばあきらめて次の問題に進むことにしました。

### 「Domino Tiling」

典型的な二部マッチングの問題でした。ドミノを置くことは、二つの隣り合うマスの間に容量1のフローが流れていることと見ることができます。上下の辺は、どちらも`V`または`.`が書かれているときにつなぐことができ、左右の辺はどちらも`H`または`.`が書かれているときにつなぐことができます。グリッドをチェス盤のように黒と白に塗り分け、ソースから黒に、黒から白に、白からシンクにと辺をつけます。最大フローを計算するために、AtCoder Libraryを利用しました。

所要時間は28分48秒でした。

# 1/6

逆転チャンス問題が追加されました。

### 「01-prefix」

なぜか忘れましたが、最初に01-prefixを解きました。ビット列がいくつか与えられて、それらの空でない部分集合のLCS長の総和を求める問題でした。

見た瞬間、「これはTechFULでよく出るBinary Trie問題かもしれない…」と思いました。しかしBinary Trieの使い方がわからないので、別の解き方を探すことにしました。

まずは、Trie木のようにグラフを作ってみることにします。以下はサンプルケース1に対応する図です。

![サンプルケース1の図](https://user-images.githubusercontent.com/44060475/150279359-ff0d1f8d-1ceb-45fe-8425-b2c53d071f5f.png)

これをどうにかすることで、うまく答えを得ようと考えました。それぞれの頂点に通る回数を置いてみたり、サンプルケース以外の図も描いてみたり、いろいろと試行錯誤をすると、見えてきたことがありました。どうやら、今いる頂点にビット列の端点や枝分かれがあるときはその長さのLCSを考えることができそうです。

最終的に、それぞれの頂点について、`(答え, 個数)`を持つことにしました。さかのぼっていく過程で、次のようにしました。

サンプルケース1

![サンプルケース1の図](https://user-images.githubusercontent.com/44060475/150280371-5bb80de1-e7df-47d6-aa35-95969ce1fe19.png)

サンプルケース2

![サンプルケース2の図](https://user-images.githubusercontent.com/44060475/150451886-ca22cd66-7cb0-409f-98e3-5f518d6d4912.png)

ある頂点についての値を次のように決めます。

- 二つの子の答えをそれぞれ<tex>a_0, a_1</tex>、通るビット列の個数をそれぞれ<tex>c_0, c_1</tex>とする。
- また、この頂点を端点とするビット列の個数を<tex>e</tex>、深さ（ビット数）を<tex>d</tex>とする。
- この頂点を通るビット列の個数<tex>c</tex>は<tex>e=c_0 + c_1 + e</tex> と定まる。
- この頂点の答え<tex>a</tex>は<tex>a=d\left\{(2^{e}-1)2^{c_0 + c_1} + (2^{c_0} - 1)(2^{c_1 - 1})\right\} + a_0 + a_1</tex>と定まる。

これをグラフを作って後ろからまとめることで、答えを得ることができました。

### 「新春と新年」

※贈賄・収賄は犯罪です。

一月派の人数を<tex>J</tex>、二月派の人数を<tex>F</tex>とすると、<tex>J<F</tex>が勝利条件です。ここで、<tex>n</tex>人の一月派に賄賂を送って取り込んだ時、<tex>J'=J-n, F'=F+n</tex>となり、<tex>J-n<F+n</tex>となります。

この式を解くと、<tex>n>\frac{F-J}{2}</tex>となります。<tex>n\ge0</tex>という条件も忘れてはいけません。つまり、答えは`max(0, ceil((F - J) / 2))`です。割った結果以上という条件のときは、切り上げ除算を使います。

実は、これを解いた時、眠くて頭が働いていなかったので、こういうことは考えられませんでした。なので、<tex>n</tex>を0から順にループして、<tex>J-n<F+n</tex>となったときに答えとしました。

### 「新人歌手新春シャンソンショー」

数式で表すと

```math
\sum_{\substack{1 \le i < j \le N \\ S_i = S_j}} (N - j + i)
```

となります。最初の条件が面倒なので、文字が<tex>c</tex>であるインデックスを<tex>I_c</tex>としてまとめておきます。たとえばS=`shinshun`なら、<tex>I_s=[1,5],I_h=[2,6],I_i=[3],I_n=[4,8],I_u=[7]</tex>といった具合です。<tex>I_{c,i}</tex>を<tex>I_c</tex>の<tex>i</tex>番目の要素、つまり文字<tex>c</tex>が<tex>i</tex>番目に現れたときのインデックスとします。

どんどん変形していきます。

```math
\begin{aligned}
&\sum_{c = \mathrm{a}}^{\mathrm{z}} \sum_{1 \le i < j \le |I_c|} (N - I_{c,j} + I_{c,i}) \\
=&\sum_{c = \mathrm{a}}^{\mathrm{z}} \left( \binom{|I_c|}{2} N - \sum_{1 \le i < j \le |I_c|} (I_{c,j} - I_{c,i}) \right) \\
=&\sum_{c = \mathrm{a}}^{\mathrm{z}} \left( \binom{|I_c|}{2} N - \sum_{1 \le i < |I_c|} \sum_{i < j \le |I_c|} (I_{c,j} - I_{c,i}) \right) \\
=&\sum_{c = \mathrm{a}}^{\mathrm{z}} \left( \binom{|I_c|}{2} N - \sum_{1 \le i < |I_c|} \left(\underset{\circledcirc}{\underline{\sum_{i < j \le |I_c|} I_{c,j}}} - (|I_c| - i) I_{c,i}\right) \right) 
\end{aligned}
```

ここまでくると、下線◎の部分は累積和で計算でき、また、他の部分もO(N)なので間に合います。このような変数が複数出る式では、式をできるだけ分解して、変数がひとつの式の組み合わせで計算できるようにすることが肝心です。

## さいごに

参加者数は255人だったらしいです。面白いですね。情報系なので、1オクテットで表せる最大の（符号なし）整数には馴染みが深いです。ところで、ひとの指は10本あるので、0から1023までを表せるという話も好きです。私は秒を数えるときに使ったりしています。しかし、（すべての関節を独立に動かせるとしたら）人の関節は144個あるという話なので、0から22300745198530623141535718272648361505980415まで表せたりしないでしょうか。もちろん無理ですが。手の指だけでも、親指は2つ、それ以外は3つの関節があるので、頑張れば268435455まで表せるかもしれません。かなり話が脱線しました。

Kが日とMex Sum、楽しいすごろくゲームは最後まで解けませんでした。とても残念です。また、複雑なあみだくじは採点されないとアナウンスがあったので読んでいません。

しかし、いつも以上に問題が多く、期間も長かったので、とても楽しいTCBでした。いつものTCBは期間が少し短いと思っていたので、10日間というのはちょうど良いくらいだと思います。

また、444賞をいただきました。とてもありがたいです。有意義に使わせていただきます。