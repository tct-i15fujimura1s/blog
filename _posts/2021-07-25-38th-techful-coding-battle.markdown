---
layout: post
title:  "Thirty-Eighth TechFUL Coding Battle"
date:   2021-07-25 23:55:00 +0900
categories: jekyll update
---

# 第38回TechFUL Coding Battle

楽しみました。

## 「ランチタイム」
あるレストランにはA種類のサラダ、B種類のメイン、C種類のデザートがあります。
サラダ、メイン、デザートからそれぞれ１つずつ選ぶ方法は何通りあるかという問題です。

サラダ、メイン、デザートの選び方はそれぞれ独立なので、各選び方を掛け算することですべての組合せが求まります。

## 「Zigzag Count Up」
0, 1, -1, 2, -2, ... という数列の何番目にXが出現するかという問題です。

主として２通りの方法が考えられます。
(a) X=0のときは1、X>0のときは2X、X<0のときは1-2X。Xの大きさに依らず高速に答えが求まりますが、少し頭を働かせる必要があります。
(b) 列挙の仕方をシミュレーションし、何番目にXが現れるか。頭をとくに使わずにできますが、Xがあまりに大きいと制限時間をオーバーしてしまいます。

## 「Assignment」
2N人の新入社員がいて、そのうちのa人は部署Aを希望、のこりのb人は部署Bを希望しています。
各部署にN人ずつ振り分けるとき希望通りの部署に行ける人数を最大化せよという問題です。

まず、a+b=2Nより、aとbの少なくとも片方はN以上であることがわかります。
そこで、大きい方をn+x、小さい方をn-xとすると、x人は希望通りの部署に行けません。
つまり、答えは2n-xです。
ここで、|a-b|=2xとなるため、2n-|a-b|/2で答えを求めることができます。

## 「草生える」
文字列Sが与えられ、S中の'w'の数+連続する'w'の数の最大値を求める問題です。

まずは'w'の数を求めます。
次に、連続する'w'の数を求めます。これはステートマシンを使ってパースしてもいいですが、正規表現を使ってマッチするやり方が楽です

## 「貯金」
貯金箱には最初0枚のコインが入っています。
1日ごとに、半々の確率でコインを0枚にするまたは1枚増やすことを繰返します。
N日後に貯金箱に入っているコインがK枚である確率×2^Nを求める問題です。

まず、コインが0枚入っている確率を考えてみます。これはN日目にコインを0枚にしたことを意味し、確率は1/2です。
次に、コインが1枚入っている確率を考えてみます。これはN-1日目にコインを0枚にし、N日目はコインを増やしたことを意味し、確率は1/4です。
このように、コインがK枚入っているということは、N-K日目にコインを0枚にし、N-K+1からN日目まではずっとコインを増やしたことを意味します。
このとき、1/2の確率の選択を合わせてK+1回しているので、確率は1/2^(K+1)となります。
答えはこれに2^Nを掛けた2^(N-K-1)です。累乗の計算には繰返し2乗法を使いましょう。

## 「Stonehenge」
いくつかの種類の石が種類ごとにA_1個、A_2個、・・・、A_N個あり、合計N個です。
これを円形に並べる方法は何通りあるかという問題です。ただし、同じ種類の石は区別しません。

N個のものを円形に並べる方法は、(N-1)!通りあります。
この問題では、同じ種類の石は区別しないため、これをA_1!、A_2!、・・・、A_N!で割ったものが答えです。

## 「並べ替えと総数」
0から9までの文字がいくつかずつあり、これらを先頭が0にならないように並べる方法が何通りあるかという問題です。

0が先頭になってはいけないため、1〜9のそれぞれが先頭になる場合の数の和を考えます。
dが先頭になる場合、のこりの文字をすべて並び替える方法の数になります。
例えば、1が先頭になるとき、Σ{A_0+(A_1-1)+A_2+...+A_9}!/(A_0!(A_1-1)!A2!...A9!)です。

## 「割り切れない数列」
非常に難しい問題です。
まず、小さい場合について考えてみます。
長さが1, 2, ..., M-1（長さがM以上の数列は条件を満たしません。証明略）の数列をすべて作り、条件を満たすものを数えれば計算できそうです。
これは深さ優先探索によって実現できます。
条件を満たすかどうかの判定は、これまで出現した和 mod Mを表すbool配列を持っておき、和 mod Mが既出なら条件を満たさないことが言えます。
大きい場合ではこのままでは間に合わないため、工夫が必要です。
そこで、動的計画法によって計算を圧縮します。
上の探索で必要だった状態は、長さ、和、これまでに出現した和であり、この状態数は最大でも9×200×2^8なので、間に合う希望が見えてきました。

## 「Ancient Cities」
頂点がN個で葉が少なくともM個ある木の個数を数え上げる問題です。

葉でなくても良い頂点はN-M個あるため、まずはこれらで全域木を作っていくつあるか考えると、ケイリーの公式より(N-M)^(N-M-2)と求まります。
各葉はこの全域木のいずれかの頂点につなげれば良いので、つなげ方は(N-M)^M通りです。
これらを掛けることで答えの(N-M)^(N-2)が求まります。

## 「仕事の割り振り」
解けませんでした。
