---
layout: post
title:  "Thirty-Eighth TechFUL Coding Battle"
date:   2021-07-25 23:55:00 +0900
categories: jekyll update
---

# 第38回TechFUL Coding Battle

楽しみました。

## 「ランチタイム」
あるレストランには$A$種類のサラダ、$B$種類のメイン、$C$種類のデザートがあります。
サラダ、メイン、デザートからそれぞれ１つずつ選ぶ方法は何通りあるかという問題です。

サラダ、メイン、デザートの選び方はそれぞれ独立なので、各選び方を掛け算することですべての組合せが求まります。

タイムは40秒でした。

## 「Zigzag Count Up」
$0, 1, -1, 2, -2, \ldots$ という数列の何番目に$X$が出現するかという問題です。

主として２通りの方法が考えられます。

- $X=0$のときは$1$、$X>0$のときは$2X$、$X<0$のときは$1-2X$。
  - 良いところは、Xの大きさに依らず高速に答えが求まる点です。
  - 悪いところは、少し頭を働かせる必要がある点です。
- 列挙の仕方をシミュレーションし、何番目に$X$が現れるか。
  - 良いところは、頭をとくに使わずにできる点です。
  - 悪いところは、$X$があまりに大きいと制限時間をオーバーしてしまう点です。

私ははじめ前者のやり方で解こうとしました。しかし、疲れていて考えるのが面倒になったので後者のやり方に切り替えて解きました。

タイムは2分40秒でした。

## 「Assignment」
$2N$人の新入社員がいて、そのうちの$a$人は部署$A$を希望、のこりの$b$人は部署$B$を希望しています。
各部署に$N$人ずつ振り分けるとき希望通りの部署に行ける人数を最大化せよという問題です。

まず、$a+b=2N$より、$a$と$b$の少なくとも片方は$N$以上であることがわかります。

そこで、大きい方を$N+x$、小さい方を$N-x$と置くと、希望通りの部署に行けないのが$x$人です。
つまり、答えは$2N-x$です。

ここで、$\|a-b\|=2x$となるため、$2N-\frac12 \|a-b\|$で答えを求めることができます。

タイムは2分2秒でした。

## 「草生える」
文字列$S$が与えられ、$S$中の`'w'`の数+連続する`'w'`の数の最大値を求める問題です。

まずは`'w'`の数を求めます。

次に、連続する`'w'`の数を求めます。これはステートマシンを使ってパースしてもいいですが、正規表現を使ってマッチするやり方が楽です。

`'w'`が含まれていない入力に対してエラーを出してしまい、再提出のペナルティで4点失ってしまいました…。

タイムは1分11秒、失点4でした。

## 「貯金」
貯金箱には最初$0$枚のコインが入っています。
$1$日ごとに、半々の確率でコインを$0$枚にするまたは$1$枚増やすことを繰返します。

$N$日後に貯金箱に入っているコインが$K$枚である確率$×2^N$を求める問題です。

まず、コインが$0$枚入っている確率を考えてみます。これは$N$日目にコインを$0$枚にしたことを意味し、確率は$\frac12$です。

次に、コインが$1$枚入っている確率を考えてみます。これは$N-1$日目にコインを$0$枚にし、$N$日目はコインを増やしたことを意味し、確率は$\frac14$です。

このように、コインが$K$枚入っているということは、$N-K$日目にコインを$0$枚にし、$N-K+1$から$N$日目まではずっとコインを増やし続けたことを意味します。
このとき、$\frac12$の確率の選択を合わせて$K+1$回しているので、確率は$\frac1{2^{K+1}}$となります。

答えはこれに$2^N$を掛けた$2^{N-K-1}$です。累乗の計算には繰返し2乗法を使います。

$N-K-1=-1$のケースでエラーを出してしまいました。

タイムは5分25秒、失点6でした。

## 「Stonehenge」
いくつかの種類の石が種類ごとに各$A_1, A_2, \ldots, A_N$個あり、これらの合計は$N$個です。
これらの石を円形に並べる方法は何通りあるかという問題です。ただし、同じ種類の石は区別しません。

$N$個のものを円形に並べる方法は、$(N-1)!$通りあります。

この問題では、同じ種類の石は区別しないため、これを$A_1! A_2! \cdots A_N!$で割ったものが答えです。

タイムは5分36秒でした。

## 「並べ替えと総数」
`0`から`9`までの文字がいくつかずつあり、これらを先頭が`0`にならないように並べる方法が何通りあるかという問題です。

`0`が先頭になってはいけないため、`1`〜`9`のそれぞれが先頭になる場合の数の和を考えます。

$d$が先頭になる場合、のこりの文字をすべて並び替える方法の数になります。

例えば、1が先頭になるとき、$\frac{(A_0+(A_1-1)+A_2+A_3+\cdots+A_9)!}{A_0!(A_1-1)!A_2!A_3!\cdots A_9!}$です。

答えは <math>\sum_{d \ne 0} \frac{((A_d - 1) + \sum_{e \ne d} A_e)!}{(A_d - 1)! \prod_{e \ne d} A_e!}</math>になります。

階乗の関数は「Stonehenge」のコード、累乗の計算は「貯金」のコードを流用しました。
よく使う関数はあらかじめ用意しておいた方が楽かもしれません。

タイムは8分34秒でした。

## 「割り切れない数列」
非常に難しい問題です。

まず、小さい場合について考えてみます。
長さが$1, 2, ..., M-1$（長さがM以上の数列は条件を満たしません。証明略）の数列をすべて作り、条件を満たすものを数えれば計算できそうです。

これは深さ優先探索によって実現できます。
条件を満たすかどうかの判定は、これまで出現した和$\text{ mod }Mを表す`bool`配列を持っておき、和$\text{ mod }M$が既出なら条件を満たさないことが言えます。

大きい場合ではこのままでは間に合わないため、工夫が必要です。
動的計画法によって計算を圧縮します。

上の探索で必要だった状態は、長さ、和、これまでに出現した和であり、この状態数は最大でも$9×200×2^8$なので、間に合います。

私はかなり難しいので解けないかもしれないと思い、部分点だけ取ろうと思ったので、まず深さ優先探索を提出し、24点を得ました。

その後、少し高速化をして27点を得、それ以上はいくら考えてもわからなかったので不貞寝をしました。

起きた時、既出のビット列を動的計画法の状態として持ったらどうかというひらめきがあって解けました。

もう少しじっくり考えていたら寝る前に思いついていたかもしれないと思うと、割り切れない思いがあります。

タイムは23時間38分15秒、失点66でした。

## 「Ancient Cities」
頂点が$N$個で葉が少なくとも$M$個ある木の個数を数え上げる問題です。

葉でなくても良い頂点は$N-M$個あり、これらは自由に使えます。

最終的に全域木ができるはずなので、これらで全域木を作る方法の数を考えると、ケイリーの公式より$(N-M)^{N-M-2}$と求まります。

各葉はこの全域木のいずれかの頂点につなげれば良いので、つなげ方は$(N-M)^M$通りです。

これらを掛けることで答えの$(N-M)^{N-2}$が求まります。

前の問題よりも簡単だったと思います。

タイムは9分47秒、失点15でした。

## 「仕事の割り振り」
解けませんでした。

ありうる仕事の割り当て方を全て列挙するコードを書いて、24点を得ました。